// import ReduxProvider from "@/redux/ReduxProvider";
import { Providers } from "@/redux/ReduxWrapper";
import { headers } from 'next/headers'
import "./globals.css";

import "../styles/typography.css";
import "../styles/variables.css";
import "../styles/layout.css";
import "../styles/base.css";
import "../styles/buttons.css";
import "../styles/ui.css";
import "../styles/extra/animations.css";
import "../styles/extra/effects.css";
import "../styles/extra/states.css";
import "../styles/extra/utilities.css";
import "../styles/forms.css";
import "../styles/stylescomponentspages.css";


if (process.env.NEXT_PUBLIC_NODE_ENV === "development") {
  const originalWarn = console.warn;
  console.warn = (...args) => {
    if (
      typeof args[0] === "string" &&
      args[0].includes("params should be awaited")
    )
      return;
    originalWarn(...args);
  };

  // override warning
}





export default async function RootLayout({
  children,
}) {
  const headersList = await headers();
  const nonce = headersList.get('x-nonce');
  return (
    <html lang="en">
      <head>
        <meta name="referrer" content="strict-origin-when-cross-origin" />
      </head>
      <body>
        {" "}
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

/* export const metadata = () => ({
  title: "Create Next App",
  description: "Generated by create next app",
}); */


//console.log("hello");


/* export async function generateMetadata({ params }) {
  const allHeaders = await headers();
  const fullUrl = allHeaders.get('x-full-url');
  const pathname = allHeaders.get('x-custom-pathname');
  let slugsinurl = pathname.split("/").filter(Boolean);;
  //console.log(fullUrl, "fullUrl from headers");
  //console.log(pathname, "pathname from headers");
  //console.log(slugsinurl, "slugsinurl from headers");
  let slugsinurlcount = slugsinurl.length;
  let slugpath;
  if (slugsinurlcount === 0) {
    slugpath = 'homepage';
  }
  const response = await fetch(
    `http://localhost:3000/api/monolingualmetadata/${slugpath}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
  let fieldsdata;
  // let headertitle = "";
  // <meta name="description" content="Default Description">
  if (!response.ok) {

  } else if (response.ok) {
    const data = await response.json();
    console.log(data, "data");
    // fieldsdata = data.pagefields;
    // console.log(fieldsdata, "fieldsdata");

    const metadata = data.metadata;
    console.log(metadata, "metadata from monolingual metadata API");

    let robotsobject

    if (metadata.robots == 'index, follow') {
      robotsobject = {
        index: true,
        follow: true,
      }
    }
    else if (metadata.robots == 'noindex, nofollow') {
      robotsobject = {
        index: false,
        follow: false,
      }

    } else if (metadata.robots == 'noindex, follow') {
      robotsobject = {
        index: false,
        follow: true,
      }
    }
    else if (metadata.robots == 'index, nofollow') {
      robotsobject = {
        index: true,
        follow: false,
      }


    } else {
      robotsobject = {
        index: true,
        follow: true,
      }
    }

    return {
      title: metadata.metatitle || "1234",
      description: metadata.metadescription || "Default Description",
      hreflang: metadata.hreflang || "en",
      openGraph: {
        title: metadata.metatitle || "Default Title",
        description: metadata.metadescription || "Default Description",
        //url: fullUrl,
        url: metadata.canonicalurl || fullUrl, // Use the canonical URL if available
        siteName: metadata.ogsitename,
        //! PUT FULL URL FOR IMAGE HERE
        images: [
          {

            // url: `${fullUrl}/og-image.png`, // Adjust the image URL as needed
            url: metadata.ogimage || `${fullUrl}/og-image.png`, // Use the ogimage from data or default
            width: 1200,
            height: 630,
            alt: "Open Graph Image",
          },
        ],
        //ogtype
        type: metadata.ogtype || "website", // Use the ogtype from data or default to "website"
      },
      twitter: {
        card: "summary_large_image",
        title: metadata.metatitle || "Default Title",
        description: metadata.metadescription || "Default Description",
        images: [metadata.ogimage], // Adjust the image URL as needed
      },
      //robots, ando
      robots: robotsobject,
    }
   */